This log was created by Sam Greaves (Gaither Lab UCF) in 2021 running our very first run of samples (~92) from RADseq seq. data from UF:

Gilg samples
3/28/2021
Transferred pools 13-18 from ~/hawkfish/coleman/raw/lane2 to here

# In ~/gilg/raw/lane2
mv ~/hawkfish/coleman/raw/lane2/1-NS2234-LibB_S13* ./
mv ~/hawkfish/coleman/raw/lane2/2-NS2234-LibB_S14* ./
mv ~/hawkfish/coleman/raw/lane2/3-NS2234-LibB_S15_* ./
mv ~/hawkfish/coleman/raw/lane2/4-NS2234-LibB_S16* ./
mv ~/hawkfish/coleman/raw/lane2/5-NS2234-LibB_S17* ./
mv ~/hawkfish/coleman/raw/lane2/6-NS2234-LibB_S18* ./

Remove PCR duplicates

# In ~/gilg
FILES=$(ls ./raw/lane2/*.fastq.gz)
./scripts/clonefilter.sh -l 6 $FILES
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 228947_0   1:50:54     25483.49M 0:55:27    2021-03-28T18:02:29 0:0
# 228947_2   1:35:12     21859.53M 0:47:36    2021-03-28T17:54:38 0:0
# 228947_4   1:18:18     17792.76M 0:39:09    2021-03-28T17:46:11 0:0
# 228947_6   1:39:22     22484.37M 0:49:41    2021-03-28T17:56:43 0:0
# 228947_8   1:39:30     22770.24M 0:49:45    2021-03-28T17:56:47 0:0
# 228947_10  1:28:54     20502.39M 0:44:27    2021-03-28T17:51:29 0:0
# Summary:
# Job Name:        clonefilter.slurm  Job ID:       228947
# Total RAM (MB):  130893             Max RAM/task: 25483.49
# Elapsed (H:M:S): 0:55:27            # tasks       6
# Total CPU Time:  9:32:10            # CPUs/task:  2
228947_0_clonefilter.slurm.out:67573198 pairs of reads input. 67042299 pairs of reads output, discarded 530899 pairs of reads, 0.79% clone reads.
228947_10_clonefilter.slurm.out:54436575 pairs of reads input. 53923028 pairs of reads output, discarded 513547 pairs of reads, 0.94% clone read.
228947_2_clonefilter.slurm.out:57966403 pairs of reads input. 57559153 pairs of reads output, discarded 407250 pairs of reads, 0.70% clone reads.
228947_4_clonefilter.slurm.out:47230903 pairs of reads input. 46906594 pairs of reads output, discarded 324309 pairs of reads, 0.69% clone reads.
228947_6_clonefilter.slurm.out:60875846 pairs of reads input. 60304163 pairs of reads output, discarded 571683 pairs of reads, 0.94% clone reads.
228947_8_clonefilter.slurm.out:60711889 pairs of reads input. 60095054 pairs of reads output, discarded 616835 pairs of reads, 1.02% clone reads.

3/29/2021
# In ~/gilg
FILES=$(ls ./raw/noclone/*[0-9].[1-2].fq.gz) # omit the discards
./scripts/demux.sh -o raw/demux -b ./info/SetB_barcodes.tsv -c -t inline_index $FILES
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 229630_0   1:46:46     33.05M   0:53:23    2021-03-30T00:11:11 1:0
# 229630_2   1:31:30     32.17M   0:45:45    2021-03-30T00:03:33 1:0
# 229630_4   1:15:14     32.71M   0:37:37    2021-03-29T23:55:25 1:0
# 229630_6   1:35:36     32.45M   0:47:48    2021-03-30T00:05:36 1:0
# 229630_8   1:35:34     33.10M   0:47:47    2021-03-30T00:05:35 1:0
# 229630_10  1:25:52     32.81M   0:42:56    2021-03-30T00:00:44 1:0
# Summary:
# Job Name:        demux.slurm        Job ID:       229630
# Total RAM (MB):  196.29             Max RAM/task: 33.10
# Elapsed (H:M:S): 0:53:23            # tasks       6
# Total CPU Time:  9:10:32            # CPUs/task:  2
3/30/2021
# In ~/gilg/logs
gawk 'BEGIN {total=0; retained=0} /Processing file/ {match($0, /\[([A-Za-z0-9_-]*)\.1\.fq\.gz\]/,pool);} /total reads/ {match($0, /([0-9]+) total reads.* ([0-9]+) retained reads/, match_arr); total+=match_arr[1]; retained+=match_arr[2]; print pool[1], $0} END {perc=retained/total*100; print "grand total reads:", total, "grand total retained:", retained, "percent retained:", perc "%"; }' ./229630*
Reads passing process_radtags (demultiplexing, removal of reads that failed Illumina chastity filter (low quality), recovery of barcodes (recovered))
grand total reads: 691660582 grand total retained: 688039303 percent retained: 99.4764%
By pools statistics are below

1-NS2234-LibB_S13_L002_R1_001   134084598 total reads; -550706 ambiguous barcodes; -0 ambiguous RAD-Tags; +1702126 recovered; -144042 low quality reads; 133389850 retained reads.
6-NS2234-LibB_S18_L002_R1_001   107846056 total reads; -460996 ambiguous barcodes; -0 ambiguous RAD-Tags; +1744884 recovered; -115855 low quality reads; 107269205 retained reads.
2-NS2234-LibB_S14_L002_R1_001   115118306 total reads; -434776 ambiguous barcodes; -0 ambiguous RAD-Tags; +2913596 recovered; -122159 low quality reads; 114561371 retained reads.
3-NS2234-LibB_S15_L002_R1_001   93813188 total reads; -400008 ambiguous barcodes; -0 ambiguous RAD-Tags; +1475524 recovered; -100347 low quality reads; 93312833 retained reads.
4-NS2234-LibB_S16_L002_R1_001   120608326 total reads; -526724 ambiguous barcodes; -0 ambiguous RAD-Tags; +1793734 recovered; -128379 low quality reads; 119953223 retained reads.
5-NS2234-LibB_S17_L002_R1_001   120190108 total reads; -508360 ambiguous barcodes; -0 ambiguous RAD-Tags; +1963912 recovered; -128927 low quality reads; 119552821 retained reads.
3/30/2021
Some of the demultiplexed files are empty...possibly hit disk quota while running, so rerunning pool 16 demultiplexing to compare

# In ~/gilg
./scripts/demux.sh -o raw/pool16-test -b ./info/SetB_barcodes.tsv -c -t inline_index raw/noclone/4-NS2234-LibB_S16_L002_R1_001.1.fq.gz raw/noclone/4-NS2234-LibB_S16_L002_R2_001.2.fq.gz
Nope, the problem is duplicate file names causing overwrites. Samples G18, SC18, H69, and H79 have duplicates.
Matt says that those in barcodes 1-3 (pools 13, 14, and 15) may have wrong adapters. The barcodes file has been updated to give these different names, while those in pool 16 are the "correct" versions.

pool16-test was deleted and all samples demultiplexed again.

# In ~/gilg
FILES=$(ls ./raw/noclone/*[0-9].[1-2].fq.gz) # omit the discards
./scripts/demux.sh -o raw/demux -b ./info/SetB_barcodes.tsv -c -t inline_index $FILES
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 230188_0   1:47:44     33.25M   0:53:52    2021-03-30T21:06:50 0:0
# 230188_2   1:33:08     32.06M   0:46:34    2021-03-30T20:59:32 0:0
# 230188_4   1:16:18     32.65M   0:38:09    2021-03-30T20:51:07 0:0
# 230188_6   1:36:36     32.25M   0:48:18    2021-03-30T21:01:16 0:0
# 230188_8   1:36:44     33.27M   0:48:22    2021-03-30T21:01:20 0:0
# 230188_10  1:26:52     32.95M   0:43:26    2021-03-30T20:56:24 0:0
# Summary:
# Job Name:        demux.slurm        Job ID:       230188
# Total RAM (MB):  196.43             Max RAM/task: 33.27
# Elapsed (H:M:S): 0:53:52            # tasks       6
# Total CPU Time:  9:17:22            # CPUs/task:  2

# In ~/gilg/logs
gawk 'BEGIN {total=0; retained=0} /Processing file/ {match($0, /\[([A-Za-z0-9_-]*)\.1\.fq\.gz\]/,pool);} /total reads/ {match($0, /([0-9]+) total reads.* ([0-9]+) retained reads/, match_arr); total+=match_arr[1]; retained+=match_arr[2]; print pool[1], $0} END {perc=retained/total*100; print "grand total reads:", total, "grand total retained:", retained, "percent retained:", perc "%"; }' ./230188*
# 1-NS2234-LibB_S13_L002_R1_001   134084598 total reads; -550706 ambiguous barcodes; -0 ambiguous RAD-Tags; +1702126 recovered; -144042 low quality reads; 133389850 retained reads.
# 6-NS2234-LibB_S18_L002_R1_001   107846056 total reads; -460996 ambiguous barcodes; -0 ambiguous RAD-Tags; +1744884 recovered; -115855 low quality reads; 107269205 retained reads.
# 2-NS2234-LibB_S14_L002_R1_001   115118306 total reads; -434776 ambiguous barcodes; -0 ambiguous RAD-Tags; +2913596 recovered; -122159 low quality reads; 114561371 retained reads.
# 3-NS2234-LibB_S15_L002_R1_001   93813188 total reads; -400008 ambiguous barcodes; -0 ambiguous RAD-Tags; +1475524 recovered; -100347 low quality reads; 93312833 retained reads.
# 4-NS2234-LibB_S16_L002_R1_001   120608326 total reads; -526724 ambiguous barcodes; -0 ambiguous RAD-Tags; +1793734 recovered; -128379 low quality reads; 119953223 retained reads.
# 5-NS2234-LibB_S17_L002_R1_001   120190108 total reads; -508360 ambiguous barcodes; -0 ambiguous RAD-Tags; +1963912 recovered; -128927 low quality reads; 119552821 retained reads.
# grand total reads: 691660582 grand total retained: 688039303 percent retained: 99.4764%
3/31/2021
Trim and quality filter

# In ~/gilg
samples=( $(cut -f 3 info/SetB_barcodes.tsv) )
limit=$(( ${#samples[@]} - 1 ))
sbatch --array 0-${limit}%16 scripts/fastp.slurm -i raw/demux -b info/SetB_barcodes.tsv
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 230262_0   0:13:22     1187.67M 0:06:41    2021-03-31T17:59:33 0:0
# 230262_1   0:02:22     1172.62M 0:01:11    2021-03-31T17:54:03 0:0
# 230262_2   0:01:22     476.40M  0:00:41    2021-03-31T17:53:33 0:0
# 230262_3   0:00:38     1.36M    0:00:19    2021-03-31T17:53:11 0:0
# 230262_4   0:01:26     453.21M  0:00:43    2021-03-31T17:53:35 0:0
# 230262_5   0:00:06     1.35M    0:00:03    2021-03-31T17:52:55 0:0
# 230262_6   0:07:02     1186.57M 0:03:31    2021-03-31T17:56:23 0:0
# 230262_7   0:04:42     1179.98M 0:02:21    2021-03-31T17:55:13 0:0
# 230262_8   0:07:00     1186.79M 0:03:30    2021-03-31T17:56:22 0:0
# 230262_9   0:09:38     1186.77M 0:04:49    2021-03-31T17:57:41 0:0
# 230262_10  0:00:52     1.35M    0:00:26    2021-03-31T17:53:18 0:0
# 230262_11  0:04:56     1184.09M 0:02:28    2021-03-31T17:55:20 0:0
# 230262_12  0:02:40     1172.13M 0:01:20    2021-03-31T17:54:12 0:0
# 230262_13  0:08:24     1185.59M 0:04:12    2021-03-31T17:57:04 0:0
# 230262_14  0:04:04     1180.43M 0:02:02    2021-03-31T17:54:54 0:0
# 230262_15  0:01:52     1172.27M 0:00:56    2021-03-31T17:53:48 0:0
# 230262_16  0:00:22     1.35M    0:00:11    2021-03-31T17:53:06 0:0
# 230262_17  0:00:20     1.35M    0:00:10    2021-03-31T17:53:16 0:0
# 230262_18  0:00:16     1.35M    0:00:08    2021-03-31T17:53:19 0:0
# 230262_19  0:00:26     1.35M    0:00:13    2021-03-31T17:53:29 0:0
# 230262_20  0:00:48     1.35M    0:00:24    2021-03-31T17:53:42 0:0
# 230262_21  0:00:02     1.35M    0:00:01    2021-03-31T17:53:20 0:0
# 230262_22  0:00:04     1.35M    0:00:02    2021-03-31T17:53:22 0:0
# 230262_23  0:01:26     502.52M  0:00:43    2021-03-31T17:54:05 0:0
# 230262_24  0:00:20     1.35M    0:00:10    2021-03-31T17:53:39 0:0
# 230262_25  0:16:44     1186.48M 0:08:22    2021-03-31T18:01:55 0:0
# 230262_26  0:10:30     1185.80M 0:05:15    2021-03-31T17:58:50 0:0
# 230262_27  0:07:44     1186.09M 0:03:52    2021-03-31T17:57:31 0:0
# 230262_28  0:06:12     1185.03M 0:03:06    2021-03-31T17:56:48 0:0
# 230262_29  0:09:16     1185.75M 0:04:38    2021-03-31T17:58:26 0:0
# 230262_30  0:00:06     1.35M    0:00:03    2021-03-31T17:54:06 0:0
# 230262_31  0:05:30     1184.00M 0:02:45    2021-03-31T17:56:50 0:0
# 230262_32  0:06:32     1189.45M 0:03:16    2021-03-31T17:57:22 0:0
# 230262_33  0:04:46     1181.43M 0:02:23    2021-03-31T17:56:35 0:0
# 230262_34  0:02:04     1173.14M 0:01:02    2021-03-31T17:55:56 0:0
# 230262_35  0:04:10     1181.40M 0:02:05    2021-03-31T17:57:18 0:0
# 230262_36  0:05:16     1186.80M 0:02:38    2021-03-31T17:57:58 0:0
# 230262_37  0:00:02     1.35M    0:00:01    2021-03-31T17:55:57 0:0
# 230262_38  0:05:50     1185.64M 0:02:55    2021-03-31T17:58:52 0:0
# 230262_39  0:02:24     1172.96M 0:01:12    2021-03-31T17:57:34 0:0
# 230262_40  0:02:42     1174.07M 0:01:21    2021-03-31T17:57:44 0:0
# 230262_41  0:01:28     474.87M  0:00:44    2021-03-31T17:57:19 0:0
# 230262_42  0:00:30     1.35M    0:00:15    2021-03-31T17:57:03 0:0
# 230262_43  0:01:20     498.38M  0:00:40    2021-03-31T17:57:30 0:0
# 230262_44  0:00:24     1.35M    0:00:12    2021-03-31T17:57:15 0:0
# 230262_45  0:04:06     1180.82M 0:02:03    2021-03-31T17:59:07 0:0
# 230262_46  0:03:42     1181.18M 0:01:51    2021-03-31T17:59:06 0:0
# 230262_47  0:03:42     1181.29M 0:01:51    2021-03-31T17:59:09 0:0
# 230262_48  0:03:12     1175.96M 0:01:36    2021-03-31T17:58:55 0:0
# 230262_49  0:00:20     1.35M    0:00:10    2021-03-31T17:57:32 0:0
# 230262_50  0:03:12     1177.88M 0:01:36    2021-03-31T17:59:06 0:0
# 230262_51  0:02:18     1173.27M 0:01:09    2021-03-31T17:58:40 0:0
# 230262_52  0:05:10     1187.65M 0:02:35    2021-03-31T18:00:07 0:0
# 230262_53  0:00:16     1.35M    0:00:08    2021-03-31T17:57:42 0:0
# 230262_54  0:00:10     1.35M    0:00:05    2021-03-31T17:57:46 0:0
# 230262_55  0:01:30     458.86M  0:00:45    2021-03-31T17:58:27 0:0
# 230262_56  0:10:50     1189.14M 0:05:25    2021-03-31T18:03:09 0:0
# 230262_57  0:00:48     1.35M    0:00:24    2021-03-31T17:58:10 0:0
# 230262_58  0:00:08     1.35M    0:00:04    2021-03-31T17:58:02 0:0
# 230262_59  0:03:10     1174.25M 0:01:35    2021-03-31T17:59:37 0:0
# 230262_60  0:17:16     1189.79M 0:08:38    2021-03-31T18:06:48 0:0
# 230262_61  0:01:32     441.33M  0:00:46    2021-03-31T17:59:12 0:0
# 230262_62  0:09:30     1189.48M 0:04:45    2021-03-31T18:03:12 0:0
# 230262_63  0:03:06     1174.66M 0:01:33    2021-03-31T18:00:13 0:0
# 230262_64  0:01:56     1174.16M 0:00:58    2021-03-31T17:59:48 0:0
# 230262_65  0:05:08     1189.03M 0:02:34    2021-03-31T18:01:26 0:0
# 230262_66  0:01:18     421.02M  0:00:39    2021-03-31T17:59:34 0:0
# 230262_67  0:03:40     1182.46M 0:01:50    2021-03-31T18:00:56 0:0
# 230262_68  0:02:58     1174.52M 0:01:29    2021-03-31T18:00:35 0:0
# 230262_69  0:02:28     1174.10M 0:01:14    2021-03-31T18:00:21 0:0
# 230262_70  0:05:08     1188.35M 0:02:34    2021-03-31T18:01:43 0:0
# 230262_71  0:04:28     1182.99M 0:02:14    2021-03-31T18:01:26 0:0
# 230262_72  0:03:44     1182.97M 0:01:52    2021-03-31T18:01:25 0:0
# 230262_73  0:04:16     1182.28M 0:02:08    2021-03-31T18:01:42 0:0
# 230262_74  0:01:54     1173.89M 0:00:57    2021-03-31T18:00:34 0:0
# 230262_75  0:04:24     1182.50M 0:02:12    2021-03-31T18:02:00 0:0
# 230262_76  0:02:46     1174.16M 0:01:23    2021-03-31T18:01:30 0:0
# 230262_77  0:04:22     1182.49M 0:02:11    2021-03-31T18:02:24 0:0
# 230262_78  0:04:26     1182.41M 0:02:13    2021-03-31T18:02:34 0:0
# 230262_79  0:06:34     1190.80M 0:03:17    2021-03-31T18:03:51 0:0
# 230262_80  0:02:06     1176.50M 0:01:03    2021-03-31T18:01:38 0:0
# 230262_81  0:06:28     1193.16M 0:03:14    2021-03-31T18:04:10 0:0
# 230262_82  0:03:06     1176.48M 0:01:33    2021-03-31T18:02:58 0:0
# 230262_83  0:02:32     1176.19M 0:01:16    2021-03-31T18:02:42 0:0
# 230262_84  0:02:52     1174.71M 0:01:26    2021-03-31T18:02:52 0:0
# 230262_85  0:02:38     1175.21M 0:01:19    2021-03-31T18:02:49 0:0
# 230262_86  0:04:56     1189.43M 0:02:28    2021-03-31T18:04:06 0:0
# 230262_87  0:02:42     1175.45M 0:01:21    2021-03-31T18:03:03 0:0
# 230262_88  0:02:50     1175.22M 0:01:25    2021-03-31T18:03:08 0:0
# 230262_89  0:01:22     490.40M  0:00:41    2021-03-31T18:02:36 0:0
# 230262_90  0:02:20     1176.11M 0:01:10    2021-03-31T18:03:10 0:0
# 230262_91  0:04:58     1191.84M 0:02:29    2021-03-31T18:04:53 0:0
# 230262_92  0:03:34     1184.54M 0:01:47    2021-03-31T18:04:21 0:0
# 230262_93  0:05:54     1190.61M 0:02:57    2021-03-31T18:05:33 0:0
# 230262_94  0:02:42     1175.61M 0:01:21    2021-03-31T18:04:03 0:0
# 230262_95  0:04:54     1191.55M 0:02:27    2021-03-31T18:05:16 0:0
# Summary:
# Job Name:        fastp.slurm        Job ID:       230262
# Total RAM (MB):  83412              Max RAM/task: 502.52
# Elapsed (H:M:S): 0:13:56            # tasks       96
# Total CPU Time:  5:57:22            # CPUs/task:  2
4/1/2021
# In ~/gilg
samples=$(cut -f 3 info/SetB_barcodes.tsv)
echo -e "sample\tdemux_r1\tdemux_r2\tdemux_total\tcleaned_r1\tcleaned_r2\tcleaned_total\tpercent_retained" > sample_read_stats.tsv
for sample in $samples
do
        echo Processing $sample
        read1_demux=$(( $( zcat raw/demux/${sample}.1.fq.gz | wc -l ) / 4 ))
        read2_demux=$(( $( zcat raw/demux/${sample}.2.fq.gz | wc -l ) / 4 ))
        demux_total=$(( $read1_demux + $read2_demux ))
        d=$(( $demux_total * 100 ))

        read1_clean=$(( $( zcat cleaned/${sample}.1.fq.gz | wc -l ) / 4 ))
        read2_clean=$(( $( zcat cleaned/${sample}.2.fq.gz | wc -l ) / 4 ))
        clean_total=$(( $read1_clean + $read2_clean ))
        c=$(( $clean_total * 100 ))

        echo -e "${sample}\t${read1_demux}\t${read2_demux}\t${demux_total}\t${read1_clean}\t${read2_clean}\t${clean_total}\t$(( $c / $d))" >> sample_read_stats.tsv
done
Created a catalog popmap for doing optimization by selecting the three samples with the most reads per prefix (27 total).
Optimizing M/n 1-9

# In ~/gilg
sbatch --array 1-9 scripts/optimize.slurm -i cleaned -o ./optimize -p ./info/popmap_catalog.tsv
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 230829_1   50:05:52    26801.24M 6:15:44    2021-04-02T01:47:56 0:0
# 230829_2   44:28:08    27352.32M 5:33:31    2021-04-02T01:05:43 0:0
# 230829_3   42:13:36    25788.22M 5:16:42    2021-04-02T00:48:54 0:0
# 230829_4   49:18:48    26216.13M 6:09:51    2021-04-02T01:42:03 0:0
# 230829_5   69:27:28    25399.55M 8:40:56    2021-04-02T04:13:08 0:0
# 230829_6   70:15:04    26177.96M 8:46:53    2021-04-02T04:19:05 0:0
# 230829_7   568:55:12   25190.96M 71:06:54   2021-04-04T18:39:06 0:0
# 230829_8   590:59:44   25226.34M 73:52:28   2021-04-04T21:24:40 0:0
# 230829_9   831:04:40   26192.16M 103:53:05  2021-04-06T03:25:17 0:0
# Summary:
# Job Name:        optimize.slurm     Job ID:       230829
# Total RAM (MB):  234345             Max RAM/task: 27352.32
# Elapsed (H:M:S): 103:53:05          # tasks       9
# Total CPU Time:  2316:48:32         # CPUs/task:  8
4/9/2021
./scripts/analyze_optimize.sh -i ./optimize
#   M n m  r loci_total loci_kept variant_sites change_variant dd_variant
# 1 1 1 3 80    1382534     27400        139039         139039         NA
# 2 2 2 3 80    1052072     37192        239478         100439      38600
# 3 3 3 3 80     909900     42763        309027          69549      30890
# 4 4 4 3 80     838822     45647        349933          40906      28643
# 5 5 5 3 80     804061     46992        370205          20272      20634
# 6 6 6 3 80     781884     47529        379038           8833      11439
# 7 7 7 3 80     769072     47599        381854           2816       6017
# 8 8 8 3 80     760789     47553        382029            175       2641
# 9 9 9 3 80     753745     47462        381567           -462        637
change_variant and dd_variant invert at 5, we reach 99% of loci at 6, and the change_variant drops below 1% at 5.

4/15/2021
Corrected Gilig_popmap.tsv to Gilg_popmap.tsv in info/.
Run ustacks at M=4 and m=3

./scripts/ustacks.sh -o denovo_M4n4m3 -p ./info/Gilg_popmap.tsv -M 4 -l 8
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 237440_0   1:21:04     3335.85M 0:10:08    2021-04-16T02:46:49 0:0
# 237440_1   0:15:12     1437.34M 0:01:54    2021-04-16T02:38:41 0:0
# 237440_2   0:16:16     975.85M  0:02:02    2021-04-16T02:38:57 0:0
# 237440_3   0:04:40     450.51M  0:00:35    2021-04-16T02:37:47 0:0
# 237440_4   0:12:08     928.42M  0:01:31    2021-04-16T02:39:18 0:0
# 237440_5   0:20:48     1659.20M 0:02:36    2021-04-16T02:40:58 0:0
# 237440_6   0:59:04     3395.17M 0:07:23    2021-04-16T02:46:04 0:0
# 237440_7   1:30:32     2898.22M 0:11:19    2021-04-16T02:50:16 0:0
# 237440_8   0:41:20     2791.49M 0:05:10    2021-04-16T02:44:28 0:0
# 237440_9   1:03:12     3115.30M 0:07:54    2021-04-16T02:48:52 0:0
# 237440_10  0:04:16     428.84M  0:00:32    2021-04-16T02:42:33 0:0
# 237440_11  0:49:28     2426.07M 0:06:11    2021-04-16T02:48:33 0:0
# 237440_12  0:18:16     1548.38M 0:02:17    2021-04-16T02:44:50 0:0
# 237440_13  1:12:16     3023.10M 0:09:02    2021-04-16T02:53:30 0:0
# 237440_14  0:20:48     1557.33M 0:02:36    2021-04-16T02:47:26 0:0
# 237440_15  0:12:16     1173.05M 0:01:32    2021-04-16T02:47:36 0:0
# 237440_16  0:01:36     1.36M    0:00:12    2021-04-16T02:46:53 0:0
# 237440_17  0:02:08     1.36M    0:00:16    2021-04-16T02:47:05 0:0
# 237440_18  0:01:20     1.36M    0:00:10    2021-04-16T02:47:03 0:0
# 237440_19  0:02:40     1.36M    0:00:20    2021-04-16T02:47:23 0:0
# 237440_20  0:05:52     473.32M  0:00:44    2021-04-16T02:47:49 0:0
# 237440_21  0:01:12     1.36M    0:00:09    2021-04-16T02:47:32 0:0
# 237440_22  0:00:00     1.36M    0:00:00    2021-04-16T02:47:26 0:0
# 237440_23  0:12:00     1196.44M 0:01:30    2021-04-16T02:48:56 0:0
# 237440_24  0:01:52     1.36M    0:00:14    2021-04-16T02:47:46 0:0
# 237440_25  2:36:00     4501.90M 0:19:30    2021-04-16T03:07:06 0:0
# 237440_26  1:17:36     3531.34M 0:09:42    2021-04-16T02:57:28 0:0
# 237440_27  1:04:16     3318.00M 0:08:02    2021-04-16T02:55:51 0:0
# 237440_28  0:17:12     1461.60M 0:02:09    2021-04-16T02:50:42 0:0
# 237440_29  1:03:20     3464.21M 0:07:55    2021-04-16T02:56:47 0:0
# 237440_30  0:00:16     1.36M    0:00:02    2021-04-16T02:48:58 0:0
# 237440_31  0:41:04     3083.42M 0:05:08    2021-04-16T02:54:06 0:0
# 237440_32  1:00:56     3264.75M 0:07:37    2021-04-16T02:57:53 0:0
# 237440_33  0:43:20     2916.62M 0:05:25    2021-04-16T02:56:07 0:0
# 237440_34  0:14:40     1429.83M 0:01:50    2021-04-16T02:55:20 0:0
# 237440_35  0:34:48     2609.87M 0:04:21    2021-04-16T02:58:27 0:0
# 237440_36  0:43:20     3235.05M 0:05:25    2021-04-16T03:00:45 0:0
# 237440_37  0:42:32     2690.61M 0:05:19    2021-04-16T03:01:10 0:0
# 237440_38  0:57:04     3314.69M 0:07:08    2021-04-16T03:03:15 0:0
# 237440_39  0:19:44     1711.09M 0:02:28    2021-04-16T02:59:15 0:0
# 237440_40  0:13:44     900.17M  0:01:43    2021-04-16T02:59:11 0:0
# 237440_41  0:09:20     785.53M  0:01:10    2021-04-16T02:59:03 0:0
# 237440_42  0:02:48     1.36M    0:00:21    2021-04-16T02:58:48 0:0
# 237440_43  0:06:24     471.34M  0:00:48    2021-04-16T02:59:36 0:0
# 237440_44  0:03:20     1.35M    0:00:25    2021-04-16T02:59:28 0:0
# 237440_45  0:36:48     1638.24M 0:04:36    2021-04-16T03:03:47 0:0
# 237440_46  0:18:56     1429.44M 0:02:22    2021-04-16T03:01:37 0:0
# 237440_47  0:17:52     1332.25M 0:02:14    2021-04-16T03:01:42 0:0
# 237440_48  0:32:56     2436.30M 0:04:07    2021-04-16T03:03:43 0:0
# 237440_49  0:02:16     1.36M    0:00:17    2021-04-16T03:01:02 0:0
# 237440_50  0:40:24     2605.93M 0:05:03    2021-04-16T03:06:05 0:0
# 237440_51  0:27:12     1412.95M 0:03:24    2021-04-16T03:04:34 0:0
# 237440_52  0:38:00     2815.96M 0:04:45    2021-04-16T03:06:22 0:0
# 237440_53  0:01:12     1.36M    0:00:09    2021-04-16T03:01:51 0:0
# 237440_54  0:00:24     1.36M    0:00:03    2021-04-16T03:01:54 0:0
# 237440_55  0:07:52     633.22M  0:00:59    2021-04-16T03:02:53 0:0
# 237440_56  1:20:48     3279.51M 0:10:06    2021-04-16T03:12:59 0:0
# 237440_57  0:05:44     448.63M  0:00:43    2021-04-16T03:03:58 0:0
# 237440_58  0:00:16     1.36M    0:00:02    2021-04-16T03:03:45 0:0
# 237440_59  0:20:40     1712.56M 0:02:35    2021-04-16T03:06:20 0:0
# 237440_60  2:30:40     3889.02M 0:18:50    2021-04-16T03:22:37 0:0
# 237440_61  0:10:16     820.19M  0:01:17    2021-04-16T03:05:15 0:0
# 237440_62  1:00:40     3268.34M 0:07:35    2021-04-16T03:12:09 0:0
# 237440_63  0:20:48     1554.59M 0:02:36    2021-04-16T03:07:51 0:0
# 237440_64  0:15:28     1496.86M 0:01:56    2021-04-16T03:08:01 0:0
# 237440_65  0:40:00     2816.91M 0:05:00    2021-04-16T03:11:20 0:0
# 237440_66  0:10:48     808.77M  0:01:21    2021-04-16T03:07:43 0:0
# 237440_67  0:34:08     2748.59M 0:04:16    2021-04-16T03:11:22 0:0
# 237440_68  0:25:36     2018.09M 0:03:12    2021-04-16T03:10:55 0:0
# 237440_69  0:23:20     1767.46M 0:02:55    2021-04-16T03:10:46 0:0
# 237440_70  0:42:32     3086.21M 0:05:19    2021-04-16T03:13:20 0:0
# 237440_71  0:41:04     2536.04M 0:05:08    2021-04-16T03:15:54 0:0
# 237440_72  0:30:32     2348.65M 0:03:49    2021-04-16T03:14:44 0:0
# 237440_73  0:32:24     2495.64M 0:04:03    2021-04-16T03:15:23 0:0
# 237440_74  0:16:32     1583.57M 0:02:04    2021-04-16T03:13:26 0:0
# 237440_75  0:41:52     2784.69M 0:05:14    2021-04-16T03:17:23 0:0
# 237440_76  0:25:12     1874.02M 0:03:09    2021-04-16T03:16:08 0:0
# 237440_77  0:36:24     2678.06M 0:04:33    2021-04-16T03:17:53 0:0
# 237440_78  0:32:48     2542.49M 0:04:06    2021-04-16T03:17:32 0:0
# 237440_79  0:53:36     3345.70M 0:06:42    2021-04-16T03:21:26 0:0
# 237440_80  0:20:56     1629.02M 0:02:37    2021-04-16T03:18:00 0:0
# 237440_81  1:06:16     3230.27M 0:08:17    2021-04-16T03:24:11 0:0
# 237440_82  0:58:32     1953.04M 0:07:19    2021-04-16T03:23:27 0:0
# 237440_83  0:37:36     1746.28M 0:04:42    2021-04-16T03:22:05 0:0
# 237440_84  0:25:52     2021.08M 0:03:14    2021-04-16T03:20:46 0:0
# 237440_85  0:23:12     1895.66M 0:02:54    2021-04-16T03:20:47 0:0
# 237440_86  0:42:00     2993.31M 0:05:15    2021-04-16T03:23:15 0:0
# 237440_87  0:23:52     1858.21M 0:02:59    2021-04-16T03:23:45 0:0
# 237440_88  0:24:40     1937.85M 0:03:05    2021-04-16T03:23:52 0:0
# 237440_89  0:11:44     871.90M  0:01:28    2021-04-16T03:22:54 0:0
# 237440_90  0:24:24     1669.68M 0:03:03    2021-04-16T03:25:08 0:0
# 237440_91  0:49:04     2692.66M 0:06:08    2021-04-16T03:28:45 0:0
# 237440_92  0:31:20     2524.52M 0:03:55    2021-04-16T03:26:49 0:0
# 237440_93  0:51:36     3235.27M 0:06:27    2021-04-16T03:29:42 0:0
# 237440_94  0:34:08     1881.73M 0:04:16    2021-04-16T03:27:43 0:0
# 237440_95  0:44:40     3038.84M 0:05:35    2021-04-16T03:29:20 0:0
# Summary:
# Job Name:        ustacks.slurm      Job ID:       237440
# Total RAM (MB):  176911             Max RAM/task: 975.85
# Elapsed (H:M:S): 0:53:01            # tasks       96
# Total CPU Time:  50:27:52           # CPUs/task:  8

./scripts/check_err.sh logs/237440*
# No errors

./scripts/ustacks_coverages.sh  237440 denovo_M4n4m3
4/22/2021
Create catalog (same popmap as during optimization)
First, I expected ustacks to strip the .1 off the file names, but it didn't and that causes a mismatch
with the population map, so the script has been updated to remove those, and the following command was run:

# In ~/gilg/denovo_M4n4m3
for file in *.1.*.gz
do
        new=$(echo $file | sed -E "s/\.1\.(.+)\.gz/\.\1\.gz/")
        echo "$file  =  $new"
        mv $file $new
done
Created a filtered popmap (popmap_filtered.tsv) with samples <1000000 reads or 10x coverage. In addition, 2 samples (SC16 and SC17) were too low coverage to remain in the catalog, which is now popmap_catalog2.tsv.

# In ~/gilg
sbatch scripts/cstacks.slurm -i denovo_M4n4m3 -p info/popmap_catalog2.tsv -n 4
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 238151     45:30:40    12204.86M 1:25:20    2021-04-22T23:57:12 0:0
# Summary:
# Job Name:        cstacks.slurm      Job ID:       238151
# Total RAM (MB):  12204.9            Max RAM/task: 12204.86
# Elapsed (H:M:S): 1:25:20            # tasks       1
# Total CPU Time:  45:30:40           # CPUs/task:  32
4/23/2021
# In ~/gilg
sbatch ./scripts/proc_samples.slurm -i denovo_M4n4m3 -p ./info/popmap_filtered.tsv
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 238913     18:42:40    60492.00M 0:35:05    2021-04-23T18:10:45 0:0
# Summary:
# Job Name:        proc_samples.slurm Job ID:       238913
# Total RAM (MB):  60492              Max RAM/task: 60492.00
# Elapsed (H:M:S): 0:35:05            # tasks       1
# Total CPU Time:  18:42:40           # CPUs/task:  32
After reviewing the logs, there are a decent number of samples that lost a lot of loci because they were not in the catalog. I think this dataset is small enough that we can just put all samples in the catalog in the next run.

# In ~/gilg
sbatch ./scripts/populations.slurm -i denovo_M4n4m3 -M ./info/popmap_filtered.tsv -X '--hwe --plink'
# JobID      CPUTime     MaxRSS   Elapsed    End                 ExitCode
# 238945     12:40:32    6048.79M 0:23:46    2021-04-24T17:57:14 0:0
# Summary:
# Job Name:        populations.slurm  Job ID:       238945
# Total RAM (MB):  6048.79            Max RAM/task: 6048.79
# Elapsed (H:M:S): 0:23:46            # tasks       1
# Total CPU Time:  12:40:32           # CPUs/task:  32
Note --plink and --hwe are just to test the script is properly adding those additional options.
44946 loci.
